/* CSC 360 - Assignment #2 - Part 1 */

1. How many threads are you going to use? Specify the work that you intend each thread to perform.

    Number of Threads = Number of Trains in the input file file + Controller Thread (Program Thread)
  
    Threads:
        \-> Train:
            \-> threads handles the loading of of the trains.
            \-> Waits for convar variable to tell it to go.
            \-> locks track mutex
            \-> waits while crossing track
            \-> unlocks track mutex
            
        \-> Program Thread:
            \-> Initializes all the train threads when reading the input file.
                once a train thread is created tell the thread to wait until the Program Thread broadcasts a Condition
                Variable to signal all trains commence loading.
            \-> This thread will contain the while loop that runs till all trains have crossed. 
                
2.  Do the threads work independently? Or, is there an overall “controller” thread?
        \-> The train threads will work independently from each other. But the main program thread will control the 
            train queues and signal the loaded trains to cross the track.
            
3.  How many mutexes are you going to use? Specify the operation that each mutex will guard.
        \-> Number of mutexes = 4
        \-> one for the track (might not be needed)? will check during implementation
        \-> one to lock/unlock the loading sequences of all trains.
        \-> two for the adding ready trains into the ready queues (low/high)

4.  Will the main thread be idle? If not, what will it be doing?
        \-> No the main thread will be checking the queues for the next ready train, and issue a signal to tell 
            the train that it can cross the track. 

5.  How are you going to represent stations (which are collections of loaded trains ready to depart)? That is, what
    type of data structure will you use?
        \-> The program will use 2 queues one for low priority trains and one for high priority trains. The direction the 
            train is traveing is already known in the train threads. The stations are only represented as a variable
            in the train threads. 
            (Can change during implementation. may be better to use a ready queue for each station)
            
6.  How are you going to ensure that data structures in your program will not be modified concurrently?
        \-> use a mutex variable to lock the data so that it is not modified concurrently.
    
7.  How many convars are you going to use? For each convar:
        (a) Describe the condition that the convar will represent.
        (b) Which mutex is associated with the convar? Why?
        (c) What operation should be performed once pthread cond wait() has been unblocked and re-acquired the
            mutex?
            
        Convar 1: commence loading:
            \-> (a) this convar is used to broadcast to all newly created train threads that they can start loading 
                    their cargo
            \-> (b) the mutex variable that locks the train loading sequence b
            \-> (c) all the trains can start loading their cargo
            
        Convar 2: start crossing track:
            \-> (a) this convar is used by the controller to tell the next ready train to start crossing the track. 
            \-> (b) the track mutex is associated with the convar since the track needs to be unlocked before the 
                    train can cross  
            \-> (c) the determined next ready train can start crossing the track.
            
8.  In 15 lines or less, briefly sketch the overall algorithm you will use. You may use sentences such as:
        
    1.  while reading input file, create each train p_thread, and lock the loading mutex, 
    2.  threads wait for broadcasted loading convar
    3.  loading convar is broadcasted (all trains have been created), all trains begin loading their cargo, 
        if loaded, lock queue mutex, add to low/high priority queue, unlock mutex, wait for track convar
    4.  while(there exists trains to cross)
            if trains exist in high priority queue, check ready times, tell train to start crossing track
            else if trains exist in low priority queue, check ready times, tell train to start crossing track.
            once train has crossed the p_thread exits and train disappears.
    5.  destroy mutexes and convars. exit program.

Procedure of the Program:

    1. Read input file for list of trains containing: 
        \-> id
        \-> direction of train
        \-> priority level (low/high)
        \-> loading time
        \-> crossing time
    1.1 tell trains to wait for convar to begin loading
    
        
    2. Signal all trains to load cargo  (broadcast condition variable)
        2.1 threads started on function: train_thread()
            \-> load train
            \-> queue and wait for convar to cross track
            \-> convar unblocks train.
            \-> train mutex locks the track
            \-> wait(crossing time)
            \-> unlock mutex variable track
            \-> reset convar
            \-> close thread
    
    3. 
    
    (1)     void init(){ 
                open file
                While(file has another train) {
                    create p_thread (in a list of threads)
    (1.1)           tell p_thread to wait until "start loading" convar is broadcasted.
                }
                close file
                for each train call pthread_join
            }
        
    (2.1)   int train_thread(){
                //load train
                //queue train
                //wait for track convar
                //lock track mutex
                //train crosses track
                //unlock track mutex
                //close train thread
            }
            
            int main(){
    (1)         init()
    (2)         broadcast("start loading" convar)
            
                while(pthreads exist in queues){
                    //check queues for next train to cross track
                    determines correct train to cross
                    issues track convar to train thread
                }
                return 0
            }   
        
